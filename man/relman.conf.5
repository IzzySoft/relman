.TH "RELMAN.CONF" "5" "02 Feb 2009"
.SH "NAME" 
relman.conf \- Configuration file for \fBrelman\fR, which acts as a frontend
to pkgmake, offering additional features like file distribution
.SH "DESCRIPTION" 
.PP 
This manual page documents the options that can be set in the relman.conf
configuration file. For a description of what relman does, see the relman(8)
manpage.

.SH "SETTINGS" 
.PP 
The syntax of options is OPTION=value - Bash syntax, since it will be sourced
by the relman executable, which is written in Bash script.

relman first parses the /etc/relman/relman.conf, and after that the
~/.relman/relman.conf (which overwrites settings then). So in the first file
you should define system-wide defaults - and your personal preferences as
e.g. your projects should be defined in your personal config file. If you are
the only user on the system, you could of course put all configuration to
/etc/relman/relman.conf if you prefer, since you don't hurt anyone by that.

There are two variables you may use in the config files: \fI$PRG\fR and
\fI$version\fR. They correspond to the first two parameters passed to the relman
command. A useful example for this is to define the name of the PKGBUILD file as
to be stored on the remote server: To have such a file for each release, you may
want its name to be something like "PKGBUILD_${version}".

.PP
The following settings are available in relman.conf:

.SS "GLOBAL SETTINGS"

.IP "\fBpkgroot\fR"
Root directory of the package tree (the same as BUILDDEB for pkgmake).

.IP "\fBpkgmake\fR"
The pkgmake executable. If it's in your path, it's enough to set it to "pkgmake".
Otherwise specify full path.

.IP "\fBpkgmakeparms\fR"
What other parameters to pass to pkgmake. Default is "-q -Q" (suppress STDOUT
from the build process and STDOUT from pkgmake itself).

.IP "\fBrelease\fR"
Default release (what is passed with \fB-r\fR to pkgmake).

.IP "\fBbuildarch\fR"
Default build architecture (\fB-b\fR to pkgmake).

.IP "\fBmktar\fR"
Whether to copy the sources from the projects *_srcdir to create a tar archive
of (set it to "1" therefore), or the corresponding tar archive already exists
in the {pkgroot}/SOURCES directory (mktar=0). E.g. your *_pre script may have
put it there.

.IP "\fBmkdeb\fR"
Whether to create Debian *.deb packages (mkdeb=1) or not (mkdeb=0)

.IP "\fBmkrpm\fR"
Whether to create RPM packages.

.IP "\fBmkchangelog\fR"
Whether to create a ChangeLog (for RPM) of the released version. If set to 0, no
ChangeLog will be created. If set to 1, a ChangeLog will be created (and passed
to pkgmake using the -c switch) if a \fB_histfile\fR has been specified for this
project as well (and that file exists).

The histfile (see \fB_histfile\fR below) in general must apply to the following
format rules to be used here:

.RS
.IP - 3
Notes for a version must start with a line in the format "v0.1.2 (date)", where
the "v" is to be taken literally, 0.1.2 is the version number, and "(date)" can
be omitted (current date will be used in this case - or when an unknown format
is used).
.IP - 3
all lines following that first line until either the next version starter line
or the end of the file (whatever comes first) belong to this release
.IP - 3
release notes start with one of the characters "*" (change), "+" (addition),
"-" (removal) or "!" (bugfix). This is not important for relman (but for histview),
but important is to never start any other line with a "v" since this would
indicate the next versions start. Since in the RPM changelog "*" is used for the
date line, relman will replace this by "%" here.
.RE

relman will only include the changes for the version to be released into the RPM
changelog, all other entries will be ignored.

.IP "\fBtarftp\fR"
FTP server the tarballs are copied to. relman will log in there using the
credentials defined in your ~/.netrc file (see \fBman netrc\fR for details).
Leave empty if you don't want to use it. To generally use it but not for a
given project, set the server here and specify *_tarftp=0 for the project.

.IP "\fBtarftpdir\fR"
Target directory on the FTP server, where the tarball should be put to.

.IP "\fBtarsftp\fR"
Similar to \fBtarftp\fR for SFTP - but the syntax here is like for \fBtarscp\fR below.

.IP "\fBtarsftpdir\fR"
Target directory on the SFTP server, where the tarball should be put to.

.IP \fBtarscp\fR
Target ([user@]server:directory) to copy the tarball to via SCP.

.IP \fBtarrsync\fR
Target ([user@]server:directory) to copy the tarball to via RSync (using SSH).

.IP \fBdebftp\fR
Same as \fBtarftp\fR, just for the *.deb files.

.IP \fBdebsftp\fR
Same as \fBtarsftp\fR, just for the *.deb files.

.IP \fBdebftpdir\fR
Target directory on the FTP server, where the *.deb should be put to.

.IP \fBdebsftpdir\fR
Target directory on the SFTP server, where the *.deb should be put to.

.IP \fBdebscp\fR
Target ([user@]server:directory) to copy the *.deb to via SCP.

.IP \fBdebrsync\fR
Target ([user@]server:directory) to copy the *.deb to via RSync (using SSH).

.IP \fBsdebftp\fR
Same as \fBtarftp\fR, just for the *.sdeb files.

.IP \fBsdebftpdir\fR
Same as \fBtarftpdir\fR, just for the *.sdeb files.

.IP \fBsdebsftp\fR
Same as \fBtarsftp\fR, just for the *.sdeb files.

.IP \fBsdebsftpdir\fR
Same as \fBtarsftpdir\fR, just for the *.sdeb files.

.IP \fBsdebscp\fR
Target ([user@]server:directory) to copy the *.sdeb to via SCP.

.IP \fBsdebrsync\fR
Target ([user@]server:directory) to copy the *.sdeb to via RSync (using SSH).

.IP \fBrpmftp\fR
Same as \fBtarftp\fR, just for the *.rpm files.

.IP \fBrpmftpdir\fR
Same as \fBtarftpdir\fR, just for the *.rpm files.

.IP \fBrpmsftp\fR
Same as \fBtarsftp\fR, just for the *.rpm files.

.IP \fBrpmsftpdir\fR
Same as \fBtarsftpdir\fR, just for the *.rpm files.

.IP \fBrpmscp\fR
Target ([user@]server:directory) to copy the *.rpm to via SCP.

.IP \fBrpmrsync\fR
Target ([user@]server:directory) to copy the *.rpm to via RSync (using SSH).

.IP \fBsrpmftp\fR
Same as \fBtarftp\fR, just for the *.srpm files.

.IP \fBsrpmftpdir\fR
Same as \fBtarftpdir\fR, just for the *.srpm files.

.IP \fBsrpmsftp\fR
Same as \fBtarsftp\fR, just for the *.srpm files.

.IP \fBsrpmsftpdir\fR
Same as \fBtarsftpdir\fR, just for the *.srpm files.

.IP \fBsrpmscp\fR
Target ([user@]server:directory) to copy the *.srpm to via SCP.

.IP \fBsrpmrsync\fR
Target ([user@]server:directory) to copy the *.srpm to via RSync (using SSH).

.IP "\fBpkgbftp, pkgbftpdir, pkgbrsync, pkgbscp, pkgbsftp, pkgbsftpdir\fR"
Configuration for the PKGBUILD file distribution. Details are similar to the
ones discussed above.

.IP \fBdescaddpkginfo\fR
(0|1) Whether to add package specifications to the distributed DescFile. These
specifications are taken from the SpecFile template, so make sure they are
really set there if you use this. Even if set to "1", it won't be applied if
there is no DescFile defined (in that case, there is nothing we could apply
it to, either). Default is "0" (do not add). Right now, the only affected
information is Architecture and Requires - if you need more, open a ticket
in the projects tracker ;)

.IP \fBhistdate\fR
Date format used in the histfile (if you want to use the histfile to create a
changelog for RPM, see \fBmkchangelog\fR). Valid settings are "d.m.Y", "Y-m-d",
"d/m/Y" and "m/d/Y".


.SS "PROJECT SETTINGS"
For each project, you may override above settings by prefixing them with the
chosen project prefix. Specifying these overrides is optional. Mandatory is,
however, the setting of the name. One more optional setting is the source
directory (passed to pkgmake via the \fB-d\fR switch).

.IP "\fB*_name\fR"
Name of the project. This is the basename of all created packages for this
project.

.IP "\fB*_srcdir\fR"
Source directory - pkgmake copies the sources from here, since it gets this
directory passed with its \fB-d\fR switch.

.IP "\fB*_prerun\fR"
Script/command to run before starting the entire process. Optional. You may use
the placeholders %p (program name), %v (version), %b (builddir)

.IP "\fB*_prebuild\fR"
Script/command to run before starting the build process, but after obtaining
the code. Optional.

.IP "\fB*_postbuild\fR"
Script/command to run after the build process finished. Optional.

.IP "\fB*_postrun\fR"
Script/command to run after the entire process finished. Skipped if no
distribution takes place. Optional.

.IP "\fB*_codeget\fR"
How we shall obtain the code. Sure, pkgmake can do that as well - but if we
want to do something on the code, but not in the original directory (i.e.
with the \fBprebuild\fR script), we have to obtain the code ourselves and then
let pkgmake know it's already in place. There are several options available:

\fIcp\fR: Just use the local copy command "cp" to transfer the code. That's exactly what
pkgmake would do.

\fIcvs\fR: Let "cvs" make an export. relman checks the CVS directory in the
\fB*_srcdir\fR to find out the repository and module information.

\fIsvn\fR: Let "svn" make an export. Quite similiar to "cvs", just using
Subversion instead.

\fI0\fR: Nothing. Let pkgmake do the job. Note, that this also means that
\fB*_prerun\fR and \fB*_prebuild\fR are running at the same position, and all
changes to the "copy" (using the %b placeholder) will be overwritten by pkgmake.

.IP "\fB*_descfile\fR"
Location (/path/to/filename) of the file containing the (plain text) program
description. This file will be passed to pkgmake with the -descfile parameter
to be used in the specfile. Moreover, it can be modified and transfered to
a remote server to be used with HistViews download class - see the other _desc*
parameters.

.IP "\fB*_descrsync\fR"
[user@]server:/path as target to rsync the \fB*_descfile\fR to. Before the
transfer is started, some modifications will be applied to the file (the original
file will of course be left untouched) to convert it to HTML (double line feeds
will be replaced by <br>, some html entities will be catered for).

.IP "\fB*_descscp\fR"
Same as \fB*_descrsync\fR - just that the file will be transfered using SCP.

.IP "\fB*_histfile\fR"
Location (/path/to/filename) of the history file which is useable for processing
by the HistView (see http://www.izzysoft.de/?topic=software)

.IP "\fB*_histftp\fR"
Server to transfer the \fB*_histfile\fR to. This is usually the one where you
have HistView installed.

.IP "\fB*_histftpdir\fR"
Directory on the \fB*_histftp\fR server we shall store the \fB*_histfile\fR in.
Note that the file will always be renamed to \fB*_name\fR.hist on the remote
server.

.IP "\fB*_histrsync\fR"
server:/path to sync the \fB*_histfile\fR to. This is usually a server where
you have HistView installed, and the path your servers setup uses to display
the file.

.IP "\fB*_histscp\fR"
server:/path to copy the \fB*_histfile\fR to. This is usually a server where
you have HistView installed, and the path your servers setup uses to display
the file. Note that on the remote server the file will always be renamed to
\fB*_name\fR.hist when relman does the copy.


.SH "SEE ALSO" 
.PP 
relman(8)

\fB/etc/relman.conf\fR contains some basic examples as well, which should
get you started.

.SH "AUTHOR" 
.PP 
This manual page was written by Andreas Itzchak Rehberg (devel@izzysoft.de),
the author of the program. Permission is granted to copy, distribute and/or
modify this document under the terms of the GNU General Public License,
Version 2.

More information may be found on the authors website, http://www.izzysoft.de/
 
