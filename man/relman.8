.TH relman 8 "27 May 2008"
.IX relman
.SH NAME
relman - a frontend to pkgmake with additional features, also doing the distribution

.SH SYNOPSIS
.B relman

\fBrelman --help\fR|\fB--list\fR

.B relman
.RB "\fIPackageName\fR"
.RB "\fIVersion\fR"
.RB [ "options" ]

Possible options:
.RB [ "-codeget \fImethod\fR" ]
.RB [ "-deb" ]
.RB [ "-dryrun" ]
.RB [ "-nodeb" ]
.RB [ "-noftp" ]
.RB [ "-nodebdist" ]
.RB [ "-nodebftp" ]
.RB [ "-nodebrsync" ]
.RB [ "-nodebscp" ]
.RB [ "-nodebsftp" ]
.RB [ "-nodescdist" ]
.RB [ "-nodescrsync" ]
.RB [ "-nodescscp" ]
.RB [ "-nodist" ]
.RB [ "-nohistdist" ]
.RB [ "-nohistftp" ]
.RB [ "-nohistrsync" ]
.RB [ "-nohistscp" ]
.RB [ "-nopostbuild" ]
.RB [ "-nopostrun" ]
.RB [ "-nopprebuild" ]
.RB [ "-noprerun" ]
.RB [ "-norpm" ]
.RB [ "-norpmdist" ]
.RB [ "-norpmftp" ]
.RB [ "-norpmrsync" ]
.RB [ "-norpmscp" ]
.RB [ "-norpmsftp" ]
.RB [ "-norsync" ]
.RB [ "-noscp" ]
.RB [ "-nosdebdist" ]
.RB [ "-nosdebftp" ]
.RB [ "-nosdebrsync" ]
.RB [ "-nosdebscp" ]
.RB [ "-nosdebsftp" ]
.RB [ "-nosrpmdist" ]
.RB [ "-notar" ]
.RB [ "-notardist" ]
.RB [ "-notarftp" ]
.RB [ "-notarrsync" ]
.RB [ "-notarscp" ]
.RB [ "-notarsftp" ]
.RB [ "-p" " \fI'pkgmake parms'\fR" ]
.RB [ "-postbuild \fIscript\fR" ]
.RB [ "-postrun \fIscript\fR" ]
.RB [ "-prebuild \fIscript\fR" ]
.RB [ "-prerun \fIscript\fR" ]
.RB [ "-q" ]
.RB [ "-r" " \fIrelease\fR" ]
.RB [ "-rpm" ]
.RB [ "-t" " \fIspecfile\fR" ]
.RB [ "-y" ]

.SH DESCRIPTION
relman acts as a frontend to pkgmake. Its target is to make the usage of pkgmake
even simpler (saving you from the need to remember the command line switches
needed for each project) by providing project-based settings in its configuration
file - plus also making the distribution of the created packages via ftp and/or
scp.

While you can store all options for all of your projects into relmans
configuration file, relman still offers you the flexibility to override these
settings on the command line. Invoking relman without parameters enters
interactive mode.

.SH OPTIONS
.IP "\fBPackageName\fR"
Name of the package to build. This will be used in the spec file for the name
tag as well as to derive the appropriate file names. If unsure what it was,
see the \fB--list\fR parameter.

.IP "\fBVersion\fR"
Number of the version to release. Say you want to release v0.3.7, this should
be "0.3.7".

.IP "\fB-codeget\fR"
Method to obtain the source code from the source dir. Possible values are "cp"
(copy), "cvs" (using "cvs export"), "svn" (using "svn export") and "0" (nothing;
let pkgmake do the job). If you let relman make the copy, you can use the
\fBprebuild\fR config option or \fB-prebuild\fR command line option to do
something on the copy of your code before making the release, leaving the
original code untouched.

.IP "\fB-deb\fR"
Make *.deb (even if config says MKDEB=0)

.IP "\fB-dryrun\fR"
Instead of executing the commands, only display what \fBwould\fR be executed.

.IP "\fB-nodeb\fR"
Don't make a *.deb package (implicitly sets -nodebdist)

.IP "\fB-nodebdist\fR"
Don't distribute *.[s]deb - same as combining all other -no[s]deb* switches

.IP "\fB-nodebftp\fR"
Don't distribute *.[s]deb via FTP

.IP "\fB-nodebrsync\fR"
Don't distribute *.[s]deb via RSync

.IP "\fB-nodebscp\fR"
Don't distribute *.[s]deb via SCP

.IP "\fB-nodebsftp\fR"
Don't distribute *.[s]deb via SFTP

.IP "\fB-nodescrsync\fR"
Don't distribute *.desc via RSync

.IP "\fB-nodescdist\fR"
Don't distribute *.desc - same as -nodescscp -nodescrsync

.IP "\fB-nodescscp\fR"
Don't distribute *.desc via SCP

.IP "\fB-nodist\fR"
Don't distribute anything - just create the packages and exit.

.IP "\fB-noftp\fR"
Same as combining all other -no*ftp switches (nothing gets distributed via FTP).

.IP "\fB-nohistdist\fR"
Don't distribute the HistFile. Same as combining \fB-nohistftp\fR and
\fB-nohistscp\fR.

.IP "\fB-nohistftp\fR"
Don't distribute the HistFile via FTP

.IP "\fB-nohistrsync\fR"
Don't distribute the HistFile via RSync

.IP "\fB-nohistscp\fR"
Don't distribute the HistFile via SCP

.IP "\fB-nopostbuild\fR"
Don't run the configured postbuild script

.IP "\fB-nopostrun\fR"
Don't run the configured postrun script

.IP "\fB-noprebuild\fR"
Don't run the configured prebuild script

.IP "\fB-noprerun\fR"
Don't run the configured prerun script

.IP "\fB-norpm\fR"
Don't create *.[s]rpm - and logically don't distribute *.[s]rpm

.IP "\fB-norpmdist\fR"
Don't distribute *.rpm (same as combining all other -norpm* switches)

.IP "\fB-norpmftp\fR"
Don't distribute *.rpm via FTP

.IP "\fB-norpmrsync\fR"
Don't distribute *.rpm via RSync

.IP "\fB-norpmscp\fR"
Don't distribute *.rpm via SCP

.IP "\fB-norpmsftp\fR"
Don't distribute *.rpm via SFTP

.IP "\fB-noscp\fR"
Pendant to -noftp: Nothing gets distributed via SCP (includes -nodebscp,
-notarscp, etc.pp.)

.IP "\fB-nosdebdist\fR"
Don't distribute *.sdeb (same as combining all other -nosdeb* switches)

.IP "\fB-nosdebftp\fR"
Don't distribute *.sdeb via FTP

.IP "\fB-nosdebrsync\fR"
Don't distribute *.sdeb via RSync

.IP "\fB-nosdebscp\fR"
Don't distribute *.sdeb via SCP

.IP "\fB-nosdebsftp\fR"
Don't distribute *.sdeb via SFTP

.IP "\fB-noscp\fR"
Don't distribute via SCP at all (same as combining all -no*scp parameters)

.IP "\fB-nosftp\fR"
Same as combining \fB-noftp\fR - just for SFTP

.IP "\fB-nosrpmdist\fR"
Don't distribute *.srpm

.IP "\fB-notar\fR"
Don't create tarball from the sources. This means, that the source tarball
already exists in the SOURCES/ directory with the correct naming conventions.
Even if you specify a directory with -d, that will be ignored in this case.

.IP "\fB-notardist\fR"
Don't distribute the tarball (-notarftp -notarscp)

.IP "\fB-notarftp\fR"
Don't distribute the tarball via FTP

.IP "\fB-notarrsync\fR"
Don't distribute the tarball via RSync

.IP "\fB-notarscp\fR"
Don't distribute the tarball via SCP

.IP "\fB-notarsftp\fR"
Don't distribute the tarball via SFTP

.IP "\fB-p\fR \fI'pkgmake parms'\fR"
If there's anything else you want to pass to pkgmake that is not covered by
relmans parameter, you can pass it here.

.IP "\fB-postbuild\fR \fIscript\fR"
Script to run after the build process, but before doing the distribution (i.e.
immediately after returning from pkgmake). This can be the name of a shell
script, or any Bash commands (enclosed in quotes).

.IP "\fB-postrun\fR \fIscript\fR"
Script to run at the very end of the entire process. This can be the name
of a shell script, or any Bash commands (enclosed in quotes). Note that this
script will not be executed if you decide not to distribute your release. Yeah,
right: You don't give us your release - so you get punished. A little. Somehow.

.IP "\fB-prebuild\fR \fIscript\fR"
Script to run after the code copy (see \fB-codeget\fR), but before entering the
build process (i.e. immediately before calling pkgmake). This can be the name
of a shell script, or any Bash commands (enclosed in quotes).

.IP "\fB-prerun\fR \fIscript\fR"
Script to run at the very beginning of the entire process. This can be the name
of a shell script, or any Bash commands (enclosed in quotes).

.IP "\fB-q\fR"
Tell the sub-processes to be quiet. You can use this option up to 2 times on
one call (starting from the 3rd time, it will simply be ignored): One -q
suppresses the load of STDOUT from the build process. The second -q
additionally suppresses its still talkative STDERR.

.IP "\fB-r\fR \fIrelease\fR"
Use a different release of the same version.

.IP "\fB-rpm\fR"
Make *.rpm even if config says MKRPM=0

.IP "\fB-t\fR \fIspecfile\fR"
Template file to use for the *.spec file. This file must be in the SPEC/
directory of your Build environment. If your directory tree is already arranged
the same way as the installation would be, you can use the alldirs.tpl (so all
files and directories will be included as-is). But if your software uses the
classical configure, make, make install - you should rather use the make.tpl
as a template, copy it to <package>.tpl and edit the file list manually
(examples are given inside make.tpl - or read the rpmbuild howtos for more
details).

.IP "\fB-y\fR"
Don't ask me stupid questions - of course I am sure, I know what I'm doing! So
answer yourself "Yes" to all!

.IP \fB--help\fR
Display some help (list syntax and available options) and exit.

.IP \fB--list\fR
List all configured packages (PackageName and full name along) and exit.


.SH "CONFIGURATION"
Configuration can be done in either ~/.relman/relman.conf,
/etc/relman/relman.conf or the head of the relman executable - which is also
the order of preference: relman first takes the configuration inside the script
itself, and then looks for ~/.relman/relman.conf - if found, this is used. If it
is not found, it looks for the /etc/relman/relman.conf and uses this file (if
found) to overwrite the default settings.

There are some additional (and optional) files if you want to use the DescFile
with the HistView download class: In either /etc/relman/ or $HOME/.relman/ you
may put files with replacement definitions. The filename must match the
project name as defined in relman.conf, and have the extension ".dr" (for
"desc replacements" (if that file exists in both locations, only the one from
$HOME/.relman will be used). In that file you define terms and their replacements,
one by line, separated by a semicolon. The first semicolon on the line will be the
separator - which means, the term-to-replace cannot contain a semicolon, while
the replacement term can.


.SH MESSAGES AND EXIT CALLS
relman uses the following exit codes:

.TP
Code
Description
.TP
0
Everything went fine - or the user (= you) decided to answer "N" to some question
on whether to continue
.TP
2
The file /etc/pkgmake/version was not found - i.e. pkgmake is not installed on
the system. Since relman depends on pkgmake, the solution is obvious: Install
pkgmake and try again.
.TP
3
The configured CVS module does not exist (check spelling etc.)
.TP
4
The option specified for \fBcodeget\fR (or \fB*_codeget\fR) is invalid. See
\fBman relman.conf\fR for available values to this option.
.TP
7
Your builddir is misconfigured. It either points directly to "/" (which should
never happen unless the relman script itself is broken) or, more likely, starts
with "/BUILD/" - which means your \fBpkgroot\fR is not set (see \fBman relman.conf\fR
for details on that configuration option).
.TP
20
CVS or SVN exited abnormally while trying to retrieve the code. No idea why, so
you have to run the whole thing manually and watch the output on screen.

.SH "FILES"
/usr/bin/relman

/etc/relman/relman.conf

~/.relman/relman.conf

/etc/relman/*.dr

~/.relman/*.dr

.SH "SEE ALSO"
relman.conf(5)

http://projects.izzysoft.de/?topic=progs;subject=relman (Project page)

http://projects.izzysoft.de/?topic=trac;subject=relman (Project Trac page:
report bugs and feature requests here, find out about latest development)

.SH "AUTHOR" 
.PP 
This manual page was written by Andreas Itzchak Rehberg (devel@izzysoft.de),
the author of the program. Permission is granted to copy, distribute and/or
modify this document under the terms of the GNU General Public License,
Version 2.

More information may be found on the authors website, http://www.izzysoft.de/
 
